********Best Practices******** 

1. COUNT(*) counts all rows including NULLs.
2. TRUNCATE removes all rows but keeps structure & resets identity (faster than DELETE).
4. A covering index contains all columns needed by the query to avoid extra reads.
5. Table variables do participate in transactions, and can have PRIMARY KEY and UNIQUE.
6. Default isolation level in SQL Server is Read Committed
7. RANGE BETWEEN ... defines the frame; OVER (ORDER BY ...) only defines order.
8. SELECT * FROM (SELECT ...) AS cte_name is a derived table, not a CTE.
9. All: unindexed columns, outdated stats, or SELECT * can cause Table Scan.
10. DATEDIFF(ms, start, end) gives milliseconds.
11. NTILE() splits rows into groups. For previous-row comparisons, LAG() is correct.
12. A heap is a table without a clustered index, but it can have non-clustered indexes.
13. Parameter sniffing happens when SQL Server uses the first parameter’s value to generate and cache an execution plan.
14. A scalar UDF (User Defined Function) in SELECT disables parallelism. Hidden cost!
15. High logical reads usually mean missing indexes—SQL Server is reading many pages.
16. sys.dm_db_missing_index_details shows suggested missing indexes based on the workload.
17. All of those options (ALTER, DBCC FREEPROCCACHE, OPTION (RECOMPILE)) will trigger recompilation.
18. A covering index includes all needed columns, so no need to go back to the base table (avoids bookmark/key lookups).
19. WAITFOR DELAY '00:01:00' pauses query execution for 1 minute.
20. For large unsorted, non-indexed datasets, Hash Join is typically used—it doesn't require sorting or indexing.
21. DBCC FREEPROCCACHE clears procedure cache, used to reset execution plans.
22. Heaps ≠ no indexes. They're tables without clustered indexes.
23. Always watch the key lookup icon in your execution plan. Covering indexes eliminate them.
24. 
