✅ Your Goal:
Show the average delivery time, total number of shipments, and total weight shipped by each carrier from the Shipments table.

🎯 Aggregation + GROUP BY

SELECT 
    Carrier,                          
    AVG(DeliveryTime) AS AvgDeliveryTime,
    COUNT(*) AS TotalShipments,
    SUM(Weight) AS TotalWeight
FROM Shipments
GROUP BY Carrier;

✅ Your Goal:

From the Employees table, find the top 2 highest paid employees in each department.

🎯 Ranking in groups (ROW_NUMBER)

SELECT *
FROM (
    SELECT 
        EmployeeName,
        Department,
        Salary,
        ROW_NUMBER() OVER(PARTITION BY Department ORDER BY Salary DESC) AS rn
    FROM Employees
) AS ranked
WHERE rn <= 2;


✅ Your Goal:
List the top 5 cities with the highest number of users registered in the last 30 days.

🎯 Top N Overall Aggregation   ❌Avoid:  Using `PARTITION BY`.

SELECT TOP 5 
    City, 
    COUNT(*) AS UserCount
FROM Users
WHERE RegistrationDate >= DATEADD(DAY, -30, GETDATE())
GROUP BY City
ORDER BY UserCount DESC;

✅ Optional CTE + ROW_NUMBER() Version

WITH CityCounts AS (
    SELECT 
        City, 
        COUNT(*) AS UserCount
    FROM Users
    WHERE RegistrationDate >= DATEADD(DAY, -30, GETDATE())
    GROUP BY City
),
Ranked AS (
    SELECT 
        *, 
        ROW_NUMBER() OVER(ORDER BY UserCount DESC) AS rn
    FROM CityCounts
)
SELECT City, UserCount
FROM Ranked
WHERE rn <= 5;



✅ Your Goal:
Return the most recent payment for each invoice from the Payments table.

🎯 Latest row per group

WITH CTE AS (
   SELECT 
       PaymentID,
       InvoiceID,
       PaymentDate,
       Amount,
       RANK() OVER (PARTITION BY InvoiceID ORDER BY PaymentDate DESC) AS rnk
   FROM Payments
)
SELECT *
FROM CTE
WHERE rnk = 1;

🔍 When to Use RANK() vs ROW_NUMBER()?
Function	Use When...
ROW_NUMBER()	You want only one record per group
RANK()	You want to include ties (e.g., multiple same-date payments)


✅ Your Goal:
Calculate how long (in minutes) each call lasted using CallStartTime and CallEndTime in the CallLogs table.

🎯 DATEDIFF between timestamps 
No GROUP BY needed because You're not aggregating data, just calculating duration per row ( — it's a row-wise calculation)

SELECT 
    CallID,
    CallStartTime, 
    CallEndTime, 
    DATEDIFF(MINUTE, CallStartTime, CallEndTime) AS CallDurationMinutes
FROM CallLogs;

✅ Your Goal: 
Find all products that have never been ordered from the Products and OrderDetails tables.
🎯 Anti-join

SELECT 
    P.ProductID, 
    P.ProductName 
FROM Products P
LEFT JOIN OrderDetails O 
    ON P.ProductID = O.ProductID
WHERE O.ProductID IS NULL;

explanation: 
LEFT JOIN	Keep all products, even if no match in OrderDetails
WHERE O.ProductID IS NULL	Filters only those products that have no order
This is called an anti-join	Very common in real-world ETL and reporting queries

✅ Your Goal: 
Detect duplicate customer records in the Customers table based on Name and Email.
🎯 duplicate detection

SELECT COUNT(CustomerID), Name, Email
FROM Customers
GROUP BY Name, Email
HAVING COUNT(CustomerID) > 1;

🧪 Bonus: Show Full Duplicate Rows (with CustomerID)

-- Step 1: Find duplicate keys
WITH DuplicateKeys AS (
    SELECT Name, Email
    FROM Customers
    GROUP BY Name, Email
    HAVING COUNT(*) > 1
)
-- Step 2: Join back to show full rows
SELECT C.CustomerID, C.Name, C.Email
FROM Customers C
JOIN DuplicateKeys D
  ON C.Name = D.Name AND C.Email = D.Email;

🔍 When to Use GROUP BY vs CTE + JOIN?
🎯  Just see duplicates by key	✅ GROUP BY ... HAVING COUNT(*) > 1
🎯  See full duplicate rows   	✅ Use CTE + JOIN



✅ Your Goal: 
Return the order ID(s) that have the exact same total amount, item count, and date as at least one other order in the Orders table.

🎯 Multi-Field Duplication : goal is to find duplicate orders with identical total, item count, and date across different OrderIDs.
✅ Correct Approach:
First, summarize each order by OrderID → TotalAmount, ItemCount, Date
Then, find which of these summaries appear more than once
Finally, join back to get all OrderIDs with duplicate summary details

-- Step 1: summarize each order
WITH OrderSummary AS (
    SELECT 
        OrderID,
        OrderDate,
        SUM(Amount) AS TotalAmount,
        COUNT(*) AS ItemCount
    FROM Orders
    GROUP BY OrderID, OrderDate
),
-- Step 2: find duplicate summaries
DuplicateKeys AS (
    SELECT 
        TotalAmount,
        ItemCount,
        OrderDate
    FROM OrderSummary
    GROUP BY TotalAmount, ItemCount, OrderDate
    HAVING COUNT(*) > 1
)
-- Step 3: return all matching OrderIDs
SELECT os.OrderID
FROM OrderSummary os
JOIN DuplicateKeys dk
  ON os.TotalAmount = dk.TotalAmount
 AND os.ItemCount = dk.ItemCount
 AND os.OrderDate = dk.OrderDate;

✅ Your Goal: 
Find employee(s) who received the second-highest bonus in each region from the EmployeeBonuses table.

📊 Top N per Group --- `ROW_NUMBER()` + `PARTITION BY`

WITH CTE AS (
    SELECT 
        EmployeeID,
        EmployeeName,
        Region,
        Bonus,
        ROW_NUMBER() OVER(PARTITION BY Region ORDER BY Bonus DESC) AS rn
    FROM EmployeeBonuses
)
SELECT *
FROM CTE
WHERE rn = 2;

✅ Your Goal: 
From the Flights table, return all flights delayed more than the average delay for their origin airport.

🎯 CTE + JOIN, or AVG() OVER(PARTITION BY)

| Column          | Description            |
| --------------- | ---------------------- |
| `FlightID`      | Unique identifier      |
| `FlightName`    | Name of flight         |
| `OriginAirport` | Source airport         |
| `DelayMinutes`  | Delay in minutes (int) |

WITH AvgDelays AS (
    SELECT 
        OriginAirport,
        AVG(DelayMinutes) AS AvgDelay
    FROM Flights
    GROUP BY OriginAirport
)
SELECT 
    F.FlightID,
    F.FlightName,
    F.OriginAirport,
    F.DelayMinutes,
    A.AvgDelay
FROM Flights F
JOIN AvgDelays A 
    ON F.OriginAirport = A.OriginAirport
WHERE F.DelayMinutes > A.AvgDelay;


✅ Alternative (Using Window Function):
SELECT 
    FlightID,
    FlightName,
    OriginAirport,
    DelayMinutes,
    AVG(DelayMinutes) OVER(PARTITION BY OriginAirport) AS AvgDelay
FROM Flights
WHERE DelayMinutes > AVG(DelayMinutes) OVER(PARTITION BY OriginAirport);


✅ Your Goal: 
Show each vendor's first and last sale date using the Sales table.

SELECT 
    Vendor,
    MIN(SaleDate) AS FirstSaleDate,
    MAX(SaleDate) AS LastSaleDate
FROM Sales
GROUP BY Vendor;

✅ Your Goal: 
Find customers who have made a purchase in exactly one product category, and no others.

CustomerPurchases (
    CustomerID,
    ProductID,
    CategoryID,
    PurchaseDate
)

✅ Correct Approach:
Group by CustomerID
Count how many distinct categories they’ve purchased from
Filter where that count = 1

SELECT CustomerID
FROM CustomerPurchases
GROUP BY CustomerID
HAVING COUNT(DISTINCT CategoryID) = 1;

✅ Explanation:
| Part                         | Purpose                                        |
| ---------------------------- | ---------------------------------------------- |
| `GROUP BY CustomerID`        | One row per customer                           |
| `COUNT(DISTINCT CategoryID)` | How many unique categories they bought from    |
| `HAVING = 1`                 | Keeps only those with **exactly one** category |

Bonus: See the Category They Purchased

SELECT CustomerID, MIN(CategoryID) AS CategoryID
FROM CustomerPurchases
GROUP BY CustomerID
HAVING COUNT(DISTINCT CategoryID) = 1;





